---
- name: "wait for api ready"
  uri:
    url: "{{ awx_host_url }}/api/v2/ping/"
    method: GET
    status_code: 200
  register: ping_result
  until: ping_result.status == 200
  retries: 10
  delay: 30

- name: change default awx admin password
  tower_user:
    username: "{{ awx_admin_user }}"
    password: "{{ awx_admin_password }}"
    email: "noreply@chanfx.com"
    first_name: Admin
    last_name: Account
    superuser: True
    state: present
    tower_host: "{{ awx_host_url }}"
    tower_username: admin
    tower_password: password
    validate_certs: "{{ awx_ssl_verify }}"
  run_once: yes
  ignore_errors: yes

- name: deploy tower cli credentials file
  copy:
    content: |
            [general]
            host = {{ awx_host_url }}
            username = {{ awx_admin_user }}
            password = {{ awx_admin_password }}
            verify_ssl = {{ awx_ssl_verify }}
    dest: "{{ awx_tower_cli }}"
    owner: root
    group: root
    mode: 0600

- name: deploy awx cli credentials file
  copy:
    content: |
             ---
             host: {{ awx_host_url }}
             username: "{{ awx_admin_user }}"
             password: "{{ awx_admin_password }}"
             insecure: "{( 'false' if awx_ssl_verify else 'true' }}"
    dest: "{{ awx_credentials_file }}"
    owner: root
    group: root
    mode: 0600

- name: generate awx command
  set_fact:
    awx_cli: "{{ awx_default_conda_path }}/bin/awx --conf.host '{{ awx_host_url }}' --conf.username '{{ awx_admin_user }}' --conf.password '{{ awx_admin_password }}'{% if not awx_ssl_verify %} --conf.insecure{% endif %}"
  no_log: yes

- name: create organizations
  tower_organization:
    name: "{{ item.value.name }}"
    state: "{{ item.value.state }}"
    description: "{{ item.value.description|d(omit) }}"
    tower_host: "{{ awx_host_url }}"
    tower_username: "{{ awx_admin_user }}"
    tower_password: "{{ awx_admin_password }}"
    validate_certs: "{{ awx_ssl_verify }}"
  loop: "{{ awx_orgs|dict2items }}"
  run_once: yes

- name: create teams
  tower_team:
    name: "{{ item.value.name }}"
    organization: "{{ item.value.organization }}"
    state: "{{ item.value.state }}"
    description: "{{ item.value.description|d(omit) }}"
    tower_host: "{{ awx_host_url }}"
    tower_username: "{{ awx_admin_user }}"
    tower_password: "{{ awx_admin_password }}"
    validate_certs: "{{ awx_ssl_verify }}"
  loop: "{{ awx_teams|dict2items }}"
  run_once: yes

- name: create users
  tower_user:
    email: "{{ item.email }}"
    username: "{{ item.username }}"
    state: "{{ item.state }}"
    auditor: "{{ item.auditor|d(omit) }}"
    password: "{{ item.password|d(omit) }}"
    first_name: "{{ item.first_name|d(omit) }}"
    last_name: "{{ item.last_name|d(omit) }}"
    superuser: "{{ item.superuser|d(omit) }}"
    tower_host: "{{ awx_host_url }}"
    tower_username: "{{ awx_admin_user }}"
    tower_password: "{{ awx_admin_password }}"
    validate_certs: "{{ awx_ssl_verify }}"
  loop: "{{ awx_users }}"
  no_log: no
  run_once: yes

- name: assign users to teams
  shell: "{{ awx_cli }} users grant '{{ item.0.username }}' --team '{{ item.1.name }}' --role '{{ item.1.role }}'"
  loop: "{{ awx_users|subelements('teams') }}"
  register: result
  changed_when: result.stdout is search("true")
  no_log: no
  run_once: yes

- name: create credentials
  tower_credential:
    name: "{{ item.name }}"
    kind: "{{ item.kind }}"
    organization: "{{ item.organization }}"
    state: "{{ item.state }}"
    authorize: "{{ item.authorize|d(omit) }}"
    authorize_password: "{{ item.authorize_password|d(omit) }}"
    become_method: "{{ item.become_method|d(omit) }}"
    become_password: "{{ item.become_password|d(omit) }}"
    become_username: "{{ item.become_username|d(omit) }}"
    client: "{{ item.client|d(omit) }}"
    description: "{{ item.description|d(omit) }}"
    domain: "{{ item.domain|d(omit) }}"
    host: "{{ item.host|d(omit) }}"
    password: "{{ item.password|d(omit) }}"
    secret: "{{ item.secret|d(omit) }}"
    security_token: "{{ item.security_token|d(omit) }}"
    ssh_key_data: "{{ item.ssh_key_data|d(omit) }}"
    ssh_key_unlock: "{{ item.ssh_key_unlock|d(omit) }}"
    subscription: "{{ item.subscription|d(omit) }}"
    team: "{{ item.team|d(omit) }}"
    tenant: "{{ item.tenant|d(omit) }}"
    user: "{{ item.user|d(omit) }}"
    username: "{{ item.username|d(omit) }}"
    vault_id: "{{ item.vault_id|d(omit) }}"
    vault_password: "{{ item.vault_password|d(omit) }}"
    tower_host: "{{ awx_host_url }}"
    tower_username: "{{ awx_admin_user }}"
    tower_password: "{{ awx_admin_password }}"
    validate_certs: "{{ awx_ssl_verify }}"
  loop: "{{ awx_credentials }}"
  no_log: no
  run_once: yes

- name: create projects
  tower_project:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    custom_virtualenv: "{{ item.custom_virtualenv|d(omit) }}"
    description: "{{ item.description|d(omit) }}"
    job_timeout: "{{ item.job_timeout|d(omit) }}"
    local_path: "{{ item.local_path|d(omit) }}"
    organization: "{{ item.organization|d(omit) }}"
    scm_branch: "{{ item.scm_branch|d(omit) }}"
    scm_clean: "{{ item.scm_clean|d(omit) }}"
    scm_credential: "{{ item.scm_credential|d(omit) }}"
    scm_delete_on_update: "{{ item.scm_delete_on_update|d(omit) }}"
    scm_type: "{{ item.scm_type|d(omit) }}"
    scm_update_cache_timeout: "{{ item.scm_update_cache_timeout|d(omit) }}"
    scm_update_on_launch: "{{ item.scm_update_on_launch|d(omit) }}"
    scm_url: "{{ item.scm_url|d(omit) }}"
    tower_host: "{{ awx_host_url }}"
    tower_username: "{{ awx_admin_user }}"
    tower_password: "{{ awx_admin_password }}"
    validate_certs: "{{ awx_ssl_verify }}"
  loop: "{{ awx_projects }}"
  run_once: yes
  when: item.local_path is not defined

# - name: update scm projects
#   shell: "{{ awx_default_conda_path }}/bin/awx project_update --name='{{ item.name }}' --wait"
#   environment:
#     AWXKIT_CREDENTIAL_FILE: "{{ awx_credentials_file }}"
#   loop: "{{ awx_projects }}"
#   run_once: yes
#   when: item.scm_type == "git" and awx_bootstrap

- name: deploy default attributes file
  template:
    src: default_attributes.yml.j2
    dest: "{{ awx_default_attributes_file }}"
    owner: root
    group: root
    mode: 0600

- name: create inventory
  tower_inventory:
    name: "{{ item.name }}"
    organization: "{{ item.organization }}"
    state: "{{ item.state }}"
    description: "{{ item.description|d(omit) }}"
    kind: "{{ item.kind|d(omit) }}"
    host_filter: "{{ item.host_filter|d(omit) }}"
    variables: "{{ item.variables|d(omit) }}"
    insights_credential: "{{ item.insights_credential|d(omit) }}"
    tower_host: "{{ awx_host_url }}"
    tower_username: "{{ awx_admin_user }}"
    tower_password: "{{ awx_admin_password }}"
    validate_certs: "{{ awx_ssl_verify }}"
  loop: "{{ awx_inventory }}"
  run_once: yes

- name: create inventory groups
  tower_group:
    name: "{{ item.name }}"
    inventory: "{{ item.inventory }}"
    state: "{{ item.state }}"
    credential: "{{ item.insights_credential|d(omit) }}"
    description: "{{ item.description|d(omit) }}"
    group_by: "{{ item.group_by|d(omit) }}"
    instance_filters: "{{ item.instance_filters|d(omit) }}"
    overwrite: "{{ item.overwrite|d(omit) }}"
    overwrite_vars: "{{ item.overwrite_vars|d(omit) }}"
    source: "{{ item.source|d(omit) }}"
    source_regions: "{{ item.source_regions|d(omit) }}"
    source_script: "{{ item.source_script|d(omit) }}"
    source_vars: "{{ item.source_vars|d(omit) }}"
    tower_host: "{{ awx_host_url }}"
    tower_username: "{{ awx_admin_user }}"
    tower_password: "{{ awx_admin_password }}"
    validate_certs: "{{ awx_ssl_verify }}"
  loop: "{{ awx_groups }}"
  run_once: yes

- name: create inventory hosts
  tower_host:
    inventory: "{{ item.0.inventory }}"
    name: "{{ item.1 }}"
    state: "{{ item.0.state }}"
    description: "{{ item.0.description|d(omit) }}"
    enabled: "{{ item.0.enabled|d(omit) }}"
    variables: "{{ item.0.variables|d(omit) }}"
    tower_host: "{{ awx_host_url }}"
    tower_username: "{{ awx_admin_user }}"
    tower_password: "{{ awx_admin_password }}"
    validate_certs: "{{ awx_ssl_verify }}"
  loop: "{{ awx_inventory_hosts|subelements('hosts') }}"
  run_once: yes

- name: get organizations
  uri:
    url: "{{ awx_host_url }}/api/v2/organizations/"
    user: "{{ awx_admin_user }}"
    password: "{{ awx_admin_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    headers:
      Content-Type: "application/json"
  register: awx_org_results

- set_fact:
    awx_org_map: "{{ awx_org_map|default({})|combine({item.name:item.id}) }}"
  loop: "{{ awx_org_results.json.results }}"

- set_fact:
    awx_inventory_scripts_list: |
      [
      {% for script in awx_inventory_scripts %}
      {% set outer_loop = loop %}
      {{ '{' }}
      {% for key, value in script.items() %}
      {% if key == 'organization' %}
      '{{ key }}': {{ awx_org_map[value] }}{{ ',' if not loop.last else '' }}
      {% elif key == 'script' %}
      '{{ key }}': {{ value|to_json }}{{ ',' if not loop.last else '' }}
      {% else %}
      '{{ key }}': '{{ value }}'{{ ',' if not loop.last else '' }}
      {% endif %}
      {% endfor %}
      {{ '}' }}{{ ',' if not outer_loop.last else '' }}
      {% endfor %}
      ]

- name: get inventory script
  uri:
    url: "{{ awx_host_url }}/api/v2/inventory_scripts/"
    user: "{{ awx_admin_user }}"
    password: "{{ awx_admin_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    headers:
      Content-Type: "application/json"
  register: awx_inventory_scripts_results

- name: create inventory scripts
  uri:
    url: "{{ awx_host_url }}/api/v2/inventory_scripts/"
    user: "{{ awx_admin_user }}"
    password: "{{ awx_admin_password }}"
    method: POST
    body: "{{ item }}"
    force_basic_auth: yes
    status_code: 201,400
    return_content: yes
    body_format: json
  loop: "{{ awx_inventory_scripts_list }}"
  run_once: yes

- name: create inventory sources
  tower_inventory_source:
    inventory: "{{ item.inventory }}"
    name: "{{ item.name }}"
    source: "{{ item.source }}"
    state: "{{ item.state }}"
    credential: "{{ item.credential|d(omit) }}"
    description: "{{ item.description|d(omit) }}"
    group_by: "{{ item.group_by|d(omit) }}"
    instance_filters: "{{ item.instance_filters|d(omit) }}"
    overwrite: "{{ item.overwrite|d(omit) }}"
    overwrite_vars: "{{ item.overwrite_vars|d(omit) }}"
    source_path: "{{ item.source_path|d(omit) }}"
    source_project: "{{ item.source_project|d(omit) }}"
    source_regions: "{{ item.source_regions|d(omit) }}"
    source_script: "{{ item.source_script|d(omit) }}"
    source_vars: "{{ item.source_vars|d(omit) }}"
    timeout: "{{ item.timeout|d(omit) }}"
    update_cache_timeout: "{{ item.update_cache_timeout|d(omit) }}"
    update_on_launch: "{{ item.update_on_launch|d(omit) }}"
    update_on_project_update: "{{ item.update_on_project_update|d(omit) }}"
    tower_host: "{{ awx_host_url }}"
    tower_username: "{{ awx_admin_user }}"
    tower_password: "{{ awx_admin_password }}"
    validate_certs: "{{ awx_ssl_verify }}"
  loop: "{{ awx_inventory_source }}"
  run_once: yes

- name: create job templates
  tower_job_template:
    name: "{{ item.name }}"
    job_type: "{{ item.job_type }}"
    playbook: "{{ item.playbook }}"
    project: "{{ item.project }}"
    state: "{{ item.state }}"
    ask_credential: "{{ item.ask_credential|d(omit) }}"
    ask_diff_mode: "{{ item.ask_diff_mode|d(omit) }}"
    ask_extra_vars: "{{ item.ask_extra_vars|d(omit) }}"
    ask_inventory: "{{ item.ask_inventory|d(omit) }}"
    ask_job_type: "{{ item.ask_job_type|d(omit) }}"
    ask_limit: "{{ item.ask_limit|d(omit) }}"
    ask_skip_tags: "{{ item.ask_skip_tags|d(omit) }}"
    ask_tags: "{{ item.ask_tags|d(omit) }}"
    ask_verbosity: "{{ item.ask_verbosity|d(omit) }}"
    become_enabled: "{{ item.become_enabled|d(omit) }}"
    concurrent_jobs_enabled: "{{ item.concurrent_jobs_enabled|d(omit) }}"
    credential: "{{ item.credential|d(omit) }}"
    description: "{{ item.description|d(omit) }}"
    diff_mode_enabled: "{{ item.diff_mode_enabled|d(omit) }}"
    extra_vars_path: "{{ item.extra_vars_path|d(omit) }}"
    fact_caching_enabled: "{{ item.fact_caching_enabled|d(omit) }}"
    force_handlers_enabled: "{{ item.force_handlers_enabled|d(omit) }}"
    forks: "{{ item.forks|d(omit) }}"
    host_config_key: "{{ item.host_config_key|d(omit) }}"
    inventory: "{{ item.inventory|d(omit) }}"
    job_tags: "{{ item.job_tags|d(omit) }}"
    limit: "{{ item.limit|d(omit) }}"
    skip_tags: "{{ item.skip_tags|d(omit) }}"
    start_at_task: "{{ item.start_at_task|d(omit) }}"
    survey_enabled: "{{ item.survey_enabled|d(omit) }}"
    survey_spec: "{{ item.survey_spec|d(omit) }}"
    vault_credential: "{{ item.vault_credential|d(omit) }}"
    verbosity: "{{ item.verbosity|d(omit) }}"
    tower_host: "{{ awx_host_url }}"
    tower_username: "{{ awx_admin_user }}"
    tower_password: "{{ awx_admin_password }}"
    validate_certs: "{{ awx_ssl_verify }}"
  loop: "{{ awx_job_templates }}"
  run_once: yes

# - name: assign credentials to job templates
#   shell: "{{ awx_default_conda_path }}/bin/awx job_template associate_credential --job-template='{{ item.0.name }}' --credential='{{ item.1 }}'"
#   environment:
#     AWXKIT_CREDENTIAL_FILE: "{{ awx_credentials_file }}"
#   loop: "{{ awx_job_templates|subelements('credentials') }}"
#   register: result
#   run_once: yes
